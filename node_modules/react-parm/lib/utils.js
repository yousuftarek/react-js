'use strict';

exports.__esModule = true;
exports.identity = exports.getNamespacedRef = exports.createRefCreator = exports.logInvalidInstanceError = exports.isClassComponent = exports.bindSetState = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @function bindSetState
 *
 * @description
 * bind the setState method to the component instance to ensure it can be used in a functional way
 *
 * @param {ReactComponent} instance the instance to bind setState to
 * @returns {void}
 */
// external dependencies
var bindSetState = exports.bindSetState = function bindSetState(instance) {
  return instance.setState = instance.setState.bind(instance);
};

/**
 * @function isClassComponent
 *
 * @description
 * is the value passed a valid react component class instance
 *
 * @param {any} value the value to test
 * @returns {boolean} is the value a react component instance
 */
var isClassComponent = exports.isClassComponent = function isClassComponent(value) {
  return !!value && value instanceof _react2.default.Component;
};

/**
 * @function logInvalidInstanceError
 *
 * @description
 * notify the user that the instance passed is invalid
 *
 * @param {string} type the type of creator being called
 * @returns {void}
 */
var logInvalidInstanceError = exports.logInvalidInstanceError = function logInvalidInstanceError(type) {
  return console.error('The instance provided for use with the ' + type + ' is not a valid React component instance.');
}; // eslint-disable-line no-console

/**
 * @function createRefCreator
 *
 * @description
 * create a method that will assign a ref value to the instance passed
 *
 * @param {function} getter the function that gets the component value for the ref
 * @returns {function(ReactComponent, string): function((HTMLElement|Component)): void} the ref create
 */
var createRefCreator = exports.createRefCreator = function createRefCreator(getter) {
  return function (instance, ref) {
    return isClassComponent(instance) ? function (component) {
      return instance[ref] = getter(component);
    } : logInvalidInstanceError('ref');
  };
};

/**
 * @function getNamespacedRef
 *
 * @description
 * get the ref that is a combination of the raw component and the component's underlying HTML element
 *
 * @param {ReactComponent} component the component to assin
 * @returns {{component: ReactComponent, element: HTMLElement}} the namespaced ref
 */
var getNamespacedRef = exports.getNamespacedRef = function getNamespacedRef(component) {
  return { component: component, element: (0, _reactDom.findDOMNode)(component) };
};

/**
 * @function identity
 *
 * @description
 * return the first parameter passed
 *
 * @param {any} value the value to pass through
 * @returns {any} the first parameter passed
 */
var identity = exports.identity = function identity(value) {
  return value;
};