'use strict';

exports.__esModule = true;
exports.setGlobalOptions = exports.getCoalescedOption = exports.GLOBAL_OPTIONS = undefined;

var _constants = require('./constants');

/**
 * @constant {Object} GLOBAL_OPTIONS the global options to apply as fallback to local props
 */
var GLOBAL_OPTIONS = exports.GLOBAL_OPTIONS = {
  hasSourceMap: !_constants.IS_PRODUCTION,
  isCompressed: true,
  isMinified: _constants.IS_PRODUCTION,
  isPrefixed: true
};

/**
 * @function getCoalescedOption
 *
 * @description
 * get the option either from props if it exists, or globally
 *
 * @param {Object} props the props to the specific instance
 * @param {string} option the option to coalesce
 * @returns {boolean} the coalesced option
 */
// constants
var getCoalescedOption = exports.getCoalescedOption = function getCoalescedOption(props, option) {
  return typeof props[option] === 'boolean' ? props[option] : GLOBAL_OPTIONS[option];
};

/**
 * @function setGlobalOptions
 *
 * @description
 * set the options passed to be global
 *
 * @param {Object} options the objects to apply globally
 * @returns {void}
 */
var setGlobalOptions = exports.setGlobalOptions = function setGlobalOptions(options) {
  return Object.keys(options).forEach(function (option) {
    return GLOBAL_OPTIONS.hasOwnProperty(option) && typeof options[option] === 'boolean' && (GLOBAL_OPTIONS[option] = options[option]);
  });
};