'use strict';

exports.__esModule = true;
/**
 * @function getUrl
 *
 * @description
 * get the URL used to generate blobs
 *
 * @returns {Object} the URL object to generate blobs with
 */
var getUrl = exports.getUrl = function () {
  var defaultObject = {};

  var URL = defaultObject;

  var getUrl = function getUrl() {
    return URL !== defaultObject ? URL : URL = typeof window !== 'undefined' ? window.URL || window.webkitURL : defaultObject;
  };

  getUrl.reset = function () {
    return URL = defaultObject;
  };

  return getUrl;
}();

/**
 * @function getHasBlobSupport
 *
 * @description
 * get whether Blobs are supported in the runtime
 *
 * @returns {boolean} are Blobs supported
 */
var getHasBlobSupport = exports.getHasBlobSupport = function getHasBlobSupport() {
  return typeof window !== 'undefined' && typeof window.Blob === 'function' && typeof getUrl().createObjectURL === 'function' && function () {
    try {
      new window.Blob();

      return true;
    } catch (error) {
      return false;
    }
  }();
};

/**
 * @function hasBlobSupport
 *
 * @description
 * a cached reference to determine Blob support in the runtime
 *
 * @returns {boolean} are Blobs supported
 */
var hasBlobSupport = exports.hasBlobSupport = function () {
  var support = false;

  var hasBlobSupport = function hasBlobSupport() {
    return support || (support = getHasBlobSupport());
  };

  hasBlobSupport.reset = function () {
    return support = false;
  };

  return hasBlobSupport;
}();

/**
 * @function getLinkHref
 *
 * @description
 * get the href of the link based on the style string Blob
 *
 * @param {string} style the style to create the Blob from
 * @returns {string} the data URI built from the Blob
 */
var getLinkHref = exports.getLinkHref = function getLinkHref(style) {
  return hasBlobSupport() ? getUrl().createObjectURL(new window.Blob([style], { type: 'text/css' })) : null;
};

/**
 * @function createGetCachedLinkHref
 *
 * @description
 * create a cached version of the getLinkHref
 *
 * @returns {function(string): string} the cached version of getLinkHref
 */
var createGetCachedLinkHref = exports.createGetCachedLinkHref = function createGetCachedLinkHref() {
  return function () {
    var href = null,
        currentStyle = null;

    return function (style) {
      return style === currentStyle ? href : (currentStyle = style) ? href = getLinkHref(style) : href = null;
    };
  }();
};