{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseAndBuildMetadata;\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _parser() {\n  const data = require(\"@babel/parser\");\n\n  _parser = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n\n  _codeFrame = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nconst PATTERN = /^[_$A-Z0-9]+$/;\n\nfunction parseAndBuildMetadata(formatter, code, opts) {\n  const ast = parseWithCodeFrame(code, opts.parser);\n  const placeholderWhitelist = opts.placeholderWhitelist,\n        _opts$placeholderPatt = opts.placeholderPattern,\n        placeholderPattern = _opts$placeholderPatt === void 0 ? PATTERN : _opts$placeholderPatt,\n        preserveComments = opts.preserveComments;\n  t().removePropertiesDeep(ast, {\n    preserveComments\n  });\n  formatter.validate(ast);\n  const placeholders = [];\n  const placeholderNames = new Set();\n  t().traverse(ast, placeholderVisitorHandler, {\n    placeholders,\n    placeholderNames,\n    placeholderWhitelist,\n    placeholderPattern\n  });\n  return {\n    ast,\n    placeholders,\n    placeholderNames\n  };\n}\n\nfunction placeholderVisitorHandler(node, ancestors, state) {\n  let name;\n\n  if (t().isIdentifier(node) || t().isJSXIdentifier(node)) {\n    name = node.name;\n  } else if (t().isStringLiteral(node)) {\n    name = node.value;\n  } else {\n    return;\n  }\n\n  if ((!state.placeholderPattern || !state.placeholderPattern.test(name)) && (!state.placeholderWhitelist || !state.placeholderWhitelist.has(name))) {\n    return;\n  }\n\n  ancestors = ancestors.slice();\n  const _ancestors = ancestors[ancestors.length - 1],\n        parent = _ancestors.node,\n        key = _ancestors.key;\n  let type;\n\n  if (t().isStringLiteral(node)) {\n    type = \"string\";\n  } else if (t().isNewExpression(parent) && key === \"arguments\" || t().isCallExpression(parent) && key === \"arguments\" || t().isFunction(parent) && key === \"params\") {\n    type = \"param\";\n  } else if (t().isExpressionStatement(parent)) {\n    type = \"statement\";\n    ancestors = ancestors.slice(0, -1);\n  } else {\n    type = \"other\";\n  }\n\n  state.placeholders.push({\n    name,\n    type,\n    resolve: ast => resolveAncestors(ast, ancestors),\n    isDuplicate: state.placeholderNames.has(name)\n  });\n  state.placeholderNames.add(name);\n}\n\nfunction resolveAncestors(ast, ancestors) {\n  let parent = ast;\n\n  for (let i = 0; i < ancestors.length - 1; i++) {\n    const _ancestors$i = ancestors[i],\n          key = _ancestors$i.key,\n          index = _ancestors$i.index;\n\n    if (index === undefined) {\n      parent = parent[key];\n    } else {\n      parent = parent[key][index];\n    }\n  }\n\n  const _ancestors2 = ancestors[ancestors.length - 1],\n        key = _ancestors2.key,\n        index = _ancestors2.index;\n  return {\n    parent,\n    key,\n    index\n  };\n}\n\nfunction parseWithCodeFrame(code, parserOpts) {\n  parserOpts = Object.assign({\n    allowReturnOutsideFunction: true,\n    allowSuperOutsideMethod: true,\n    sourceType: \"module\"\n  }, parserOpts);\n\n  try {\n    return (0, _parser().parse)(code, parserOpts);\n  } catch (err) {\n    const loc = err.loc;\n\n    if (loc) {\n      err.message += \"\\n\" + (0, _codeFrame().codeFrameColumns)(code, {\n        start: loc\n      });\n      err.code = \"BABEL_TEMPLATE_PARSE_ERROR\";\n    }\n\n    throw err;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}