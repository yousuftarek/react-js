{"ast":null,"code":"// external dependencies\nimport beautify from 'cssbeautify';\nimport Stylis from 'stylis'; // constants\n\nimport { BEAUTIFY_OPTIONS } from './constants';\n/**\n * @function getProcessedStyles\n *\n * @description\n * get the styles processed by stylis\n *\n * @param {string} rawStyle the style to process\n * @param {Object} props the props passed to the component\n * @param {boolean} props.isCompressed is compressed CSS output requested\n * @param {boolean} props.isPrefixed is vendor-prefixed CSS requested\n * @returns {string} the processed styles\n */\n\nexport var getProcessedStyles = function getProcessedStyles(rawStyle, _ref) {\n  var isCompressed = _ref.isCompressed,\n      isPrefixed = _ref.isPrefixed;\n  return new Stylis({\n    compress: isCompressed,\n    global: false,\n    keyframe: false,\n    prefix: isPrefixed\n  })('', rawStyle);\n};\n/**\n * @function getRenderedStyles\n *\n * @description\n * get the styles rendered in the HTML tag\n *\n * @param {string} rawStyle the style to process\n * @param {Object} props the props passed to the component\n * @param {boolean} props.isMinified is minified CSS output requested\n * @returns {string} the styles to use in the rendered tag\n */\n\nexport var getRenderedStyles = function getRenderedStyles(rawStyle, props) {\n  return props.isMinified ? getProcessedStyles(rawStyle, props) : beautify(getProcessedStyles(rawStyle, props), BEAUTIFY_OPTIONS);\n};","map":null,"metadata":{},"sourceType":"module"}