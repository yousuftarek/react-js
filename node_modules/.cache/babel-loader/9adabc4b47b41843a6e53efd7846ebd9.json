{"ast":null,"code":"\"use strict\";\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _es = require(\"./es2015\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\n(0, _utils.default)(\"ArgumentPlaceholder\", {});\n(0, _utils.default)(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: {}\n});\n(0, _utils.default)(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\"key\", \"value\", \"typeAnnotation\", \"decorators\", \"computed\"],\n  aliases: [\"Property\"],\n  fields: Object.assign({}, _es.classMethodOrPropertyCommon, {\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    property: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        return function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      }()\n    },\n    computed: {\n      default: false\n    },\n    optional: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    arguments: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\", \"JSXNamespacedName\")))\n    },\n    optional: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    },\n    typeArguments: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\"],\n  builder: [\"key\", \"value\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"Private\"],\n  fields: Object.assign({}, _es.classMethodOrDeclareMethodCommon, {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\n(0, _utils.default)(\"Import\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"DoExpression\", {\n  visitor: [\"body\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});","map":{"version":3,"sources":["/home/hyper/Downloads/bookstore/node_modules/@babel/types/lib/definitions/experimental.js"],"names":["_utils","_interopRequireWildcard","require","_es","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","desc","defineProperty","getOwnPropertyDescriptor","get","set","default","builder","visitor","aliases","fields","argument","validate","assertNodeType","assign","classMethodOrPropertyCommon","value","optional","definite","assertValueType","typeAnnotation","decorators","chain","assertEach","readonly","object","property","normal","computed","node","val","validator","expression","callee","arguments","typeArguments","typeParameters","classMethodOrDeclareMethodCommon","body","exported","id"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _es = require(\"./es2015\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n(0, _utils.default)(\"ArgumentPlaceholder\", {});\n(0, _utils.default)(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: {}\n});\n(0, _utils.default)(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\"key\", \"value\", \"typeAnnotation\", \"decorators\", \"computed\"],\n  aliases: [\"Property\"],\n  fields: Object.assign({}, _es.classMethodOrPropertyCommon, {\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Decorator\"))),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\n(0, _utils.default)(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    property: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        return function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      }()\n    },\n    computed: {\n      default: false\n    },\n    optional: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    arguments: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\", \"JSXNamespacedName\")))\n    },\n    optional: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    },\n    typeArguments: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\"],\n  builder: [\"key\", \"value\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    }\n  }\n});\n(0, _utils.default)(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"Private\"],\n  fields: Object.assign({}, _es.classMethodOrDeclareMethodCommon, {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\n(0, _utils.default)(\"Import\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"DoExpression\", {\n  visitor: [\"body\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});"]},"metadata":{},"sourceType":"script"}