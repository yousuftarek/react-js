{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction helpers() {\n  const data = _interopRequireWildcard(require(\"@babel/helpers\"));\n\n  helpers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  const data = _interopRequireDefault(require(\"@babel/generator\"));\n\n  _generator = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  const data = _interopRequireDefault(require(\"@babel/template\"));\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nconst buildUmdWrapper = replacements => _template().default`\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  `(replacements);\n\nfunction buildGlobal(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  const container = t().functionExpression(null, [t().identifier(\"global\")], t().blockStatement(body));\n  const tree = t().program([t().expressionStatement(t().callExpression(container, [t().conditionalExpression(t().binaryExpression(\"===\", t().unaryExpression(\"typeof\", t().identifier(\"global\")), t().stringLiteral(\"undefined\")), t().identifier(\"self\"), t().identifier(\"global\"))]))]);\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"global\"), namespace), t().objectExpression([])))]));\n  buildHelpers(body, namespace, whitelist);\n  return tree;\n}\n\nfunction buildModule(whitelist) {\n  const body = [];\n  const refs = buildHelpers(body, null, whitelist);\n  body.unshift(t().exportNamedDeclaration(null, Object.keys(refs).map(name => {\n    return t().exportSpecifier(t().cloneNode(refs[name]), t().identifier(name));\n  })));\n  return t().program(body, [], \"module\");\n}\n\nfunction buildUmd(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().identifier(\"global\"))]));\n  buildHelpers(body, namespace, whitelist);\n  return t().program([buildUmdWrapper({\n    FACTORY_PARAMETERS: t().identifier(\"global\"),\n    BROWSER_ARGUMENTS: t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"root\"), namespace), t().objectExpression([])),\n    COMMON_ARGUMENTS: t().identifier(\"exports\"),\n    AMD_ARGUMENTS: t().arrayExpression([t().stringLiteral(\"exports\")]),\n    FACTORY_BODY: body,\n    UMD_ROOT: t().identifier(\"this\")\n  })]);\n}\n\nfunction buildVar(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().objectExpression([]))]));\n  const tree = t().program(body);\n  buildHelpers(body, namespace, whitelist);\n  body.push(t().expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(body, namespace, whitelist) {\n  const getHelperReference = name => {\n    return namespace ? t().memberExpression(namespace, t().identifier(name)) : t().identifier(`_${name}`);\n  };\n\n  const refs = {};\n  helpers().list.forEach(function (name) {\n    if (whitelist && whitelist.indexOf(name) < 0) return;\n    const ref = refs[name] = getHelperReference(name);\n\n    const _helpers$get = helpers().get(name, getHelperReference, ref),\n          nodes = _helpers$get.nodes;\n\n    body.push(...nodes);\n  });\n  return refs;\n}\n\nfunction _default(whitelist, outputType = \"global\") {\n  let tree;\n  const build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar\n  }[outputType];\n\n  if (build) {\n    tree = build(whitelist);\n  } else {\n    throw new Error(`Unsupported output type ${outputType}`);\n  }\n\n  return (0, _generator().default)(tree).code;\n}","map":{"version":3,"sources":["/home/hyper/Downloads/gronthik/bookstore/node_modules/@babel/core/lib/tools/build-external-helpers.js"],"names":["Object","defineProperty","exports","value","default","_default","helpers","data","_interopRequireWildcard","require","_generator","_interopRequireDefault","_template","t","obj","__esModule","_getRequireWildcardCache","WeakMap","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","buildUmdWrapper","replacements","buildGlobal","whitelist","namespace","identifier","body","container","functionExpression","blockStatement","tree","program","expressionStatement","callExpression","conditionalExpression","binaryExpression","unaryExpression","stringLiteral","push","variableDeclaration","variableDeclarator","assignmentExpression","memberExpression","objectExpression","buildHelpers","buildModule","refs","unshift","exportNamedDeclaration","keys","map","name","exportSpecifier","cloneNode","buildUmd","FACTORY_PARAMETERS","BROWSER_ARGUMENTS","COMMON_ARGUMENTS","AMD_ARGUMENTS","arrayExpression","FACTORY_BODY","UMD_ROOT","buildVar","getHelperReference","list","forEach","indexOf","ref","nodes","outputType","build","global","module","umd","var","Error","code"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,SAASC,OAAT,GAAmB;AACjB,QAAMC,IAAI,GAAGC,uBAAuB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAApC;;AAEAH,EAAAA,OAAO,GAAG,YAAY;AACpB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASG,UAAT,GAAsB;AACpB,QAAMH,IAAI,GAAGI,sBAAsB,CAACF,OAAO,CAAC,kBAAD,CAAR,CAAnC;;AAEAC,EAAAA,UAAU,GAAG,YAAY;AACvB,WAAOH,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASK,SAAT,GAAqB;AACnB,QAAML,IAAI,GAAGI,sBAAsB,CAACF,OAAO,CAAC,iBAAD,CAAR,CAAnC;;AAEAG,EAAAA,SAAS,GAAG,YAAY;AACtB,WAAOL,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASM,CAAT,GAAa;AACX,QAAMN,IAAI,GAAGC,uBAAuB,CAACC,OAAO,CAAC,cAAD,CAAR,CAApC;;AAEAI,EAAAA,CAAC,GAAG,YAAY;AACd,WAAON,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,SAASI,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEV,IAAAA,OAAO,EAAEU;AAAX,GAArC;AAAwD;;AAE/F,SAASE,wBAAT,GAAoC;AAAE,MAAI,OAAOC,OAAP,KAAmB,UAAvB,EAAmC,OAAO,IAAP;AAAa,MAAIC,KAAK,GAAG,IAAID,OAAJ,EAAZ;;AAA2BD,EAAAA,wBAAwB,GAAG,YAAY;AAAE,WAAOE,KAAP;AAAe,GAAxD;;AAA0D,SAAOA,KAAP;AAAe;;AAE1L,SAASV,uBAAT,CAAiCM,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B;AAAE,WAAOD,GAAP;AAAa;;AAAC,MAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAA9D,EAA0E;AAAE,WAAO;AAAEV,MAAAA,OAAO,EAAEU;AAAX,KAAP;AAA0B;;AAAC,MAAII,KAAK,GAAGF,wBAAwB,EAApC;;AAAwC,MAAIE,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUL,GAAV,CAAb,EAA6B;AAAE,WAAOI,KAAK,CAACE,GAAN,CAAUN,GAAV,CAAP;AAAwB;;AAAC,MAAIO,MAAM,GAAG,EAAb;AAAiB,MAAIC,qBAAqB,GAAGtB,MAAM,CAACC,cAAP,IAAyBD,MAAM,CAACuB,wBAA5D;;AAAsF,OAAK,IAAIC,GAAT,IAAgBV,GAAhB,EAAqB;AAAE,QAAId,MAAM,CAACyB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCb,GAArC,EAA0CU,GAA1C,CAAJ,EAAoD;AAAE,UAAII,IAAI,GAAGN,qBAAqB,GAAGtB,MAAM,CAACuB,wBAAP,CAAgCT,GAAhC,EAAqCU,GAArC,CAAH,GAA+C,IAA/E;;AAAqF,UAAII,IAAI,KAAKA,IAAI,CAACR,GAAL,IAAYQ,IAAI,CAACC,GAAtB,CAAR,EAAoC;AAAE7B,QAAAA,MAAM,CAACC,cAAP,CAAsBoB,MAAtB,EAA8BG,GAA9B,EAAmCI,IAAnC;AAA2C,OAAjF,MAAuF;AAAEP,QAAAA,MAAM,CAACG,GAAD,CAAN,GAAcV,GAAG,CAACU,GAAD,CAAjB;AAAyB;AAAE;AAAE;;AAACH,EAAAA,MAAM,CAACjB,OAAP,GAAiBU,GAAjB;;AAAsB,MAAII,KAAJ,EAAW;AAAEA,IAAAA,KAAK,CAACW,GAAN,CAAUf,GAAV,EAAeO,MAAf;AAAyB;;AAAC,SAAOA,MAAP;AAAgB;;AAEvuB,MAAMS,eAAe,GAAGC,YAAY,IAAInB,SAAS,GAAGR,OAAQ;;;;;;;;;;;;GAApB,CAYpC2B,YAZoC,CAAxC;;AAcA,SAASC,WAAT,CAAqBC,SAArB,EAAgC;AAC9B,QAAMC,SAAS,GAAGrB,CAAC,GAAGsB,UAAJ,CAAe,cAAf,CAAlB;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,SAAS,GAAGxB,CAAC,GAAGyB,kBAAJ,CAAuB,IAAvB,EAA6B,CAACzB,CAAC,GAAGsB,UAAJ,CAAe,QAAf,CAAD,CAA7B,EAAyDtB,CAAC,GAAG0B,cAAJ,CAAmBH,IAAnB,CAAzD,CAAlB;AACA,QAAMI,IAAI,GAAG3B,CAAC,GAAG4B,OAAJ,CAAY,CAAC5B,CAAC,GAAG6B,mBAAJ,CAAwB7B,CAAC,GAAG8B,cAAJ,CAAmBN,SAAnB,EAA8B,CAACxB,CAAC,GAAG+B,qBAAJ,CAA0B/B,CAAC,GAAGgC,gBAAJ,CAAqB,KAArB,EAA4BhC,CAAC,GAAGiC,eAAJ,CAAoB,QAApB,EAA8BjC,CAAC,GAAGsB,UAAJ,CAAe,QAAf,CAA9B,CAA5B,EAAqFtB,CAAC,GAAGkC,aAAJ,CAAkB,WAAlB,CAArF,CAA1B,EAAgJlC,CAAC,GAAGsB,UAAJ,CAAe,MAAf,CAAhJ,EAAwKtB,CAAC,GAAGsB,UAAJ,CAAe,QAAf,CAAxK,CAAD,CAA9B,CAAxB,CAAD,CAAZ,CAAb;AACAC,EAAAA,IAAI,CAACY,IAAL,CAAUnC,CAAC,GAAGoC,mBAAJ,CAAwB,KAAxB,EAA+B,CAACpC,CAAC,GAAGqC,kBAAJ,CAAuBhB,SAAvB,EAAkCrB,CAAC,GAAGsC,oBAAJ,CAAyB,GAAzB,EAA8BtC,CAAC,GAAGuC,gBAAJ,CAAqBvC,CAAC,GAAGsB,UAAJ,CAAe,QAAf,CAArB,EAA+CD,SAA/C,CAA9B,EAAyFrB,CAAC,GAAGwC,gBAAJ,CAAqB,EAArB,CAAzF,CAAlC,CAAD,CAA/B,CAAV;AACAC,EAAAA,YAAY,CAAClB,IAAD,EAAOF,SAAP,EAAkBD,SAAlB,CAAZ;AACA,SAAOO,IAAP;AACD;;AAED,SAASe,WAAT,CAAqBtB,SAArB,EAAgC;AAC9B,QAAMG,IAAI,GAAG,EAAb;AACA,QAAMoB,IAAI,GAAGF,YAAY,CAAClB,IAAD,EAAO,IAAP,EAAaH,SAAb,CAAzB;AACAG,EAAAA,IAAI,CAACqB,OAAL,CAAa5C,CAAC,GAAG6C,sBAAJ,CAA2B,IAA3B,EAAiC1D,MAAM,CAAC2D,IAAP,CAAYH,IAAZ,EAAkBI,GAAlB,CAAsBC,IAAI,IAAI;AAC1E,WAAOhD,CAAC,GAAGiD,eAAJ,CAAoBjD,CAAC,GAAGkD,SAAJ,CAAcP,IAAI,CAACK,IAAD,CAAlB,CAApB,EAA+ChD,CAAC,GAAGsB,UAAJ,CAAe0B,IAAf,CAA/C,CAAP;AACD,GAF6C,CAAjC,CAAb;AAGA,SAAOhD,CAAC,GAAG4B,OAAJ,CAAYL,IAAZ,EAAkB,EAAlB,EAAsB,QAAtB,CAAP;AACD;;AAED,SAAS4B,QAAT,CAAkB/B,SAAlB,EAA6B;AAC3B,QAAMC,SAAS,GAAGrB,CAAC,GAAGsB,UAAJ,CAAe,cAAf,CAAlB;AACA,QAAMC,IAAI,GAAG,EAAb;AACAA,EAAAA,IAAI,CAACY,IAAL,CAAUnC,CAAC,GAAGoC,mBAAJ,CAAwB,KAAxB,EAA+B,CAACpC,CAAC,GAAGqC,kBAAJ,CAAuBhB,SAAvB,EAAkCrB,CAAC,GAAGsB,UAAJ,CAAe,QAAf,CAAlC,CAAD,CAA/B,CAAV;AACAmB,EAAAA,YAAY,CAAClB,IAAD,EAAOF,SAAP,EAAkBD,SAAlB,CAAZ;AACA,SAAOpB,CAAC,GAAG4B,OAAJ,CAAY,CAACX,eAAe,CAAC;AAClCmC,IAAAA,kBAAkB,EAAEpD,CAAC,GAAGsB,UAAJ,CAAe,QAAf,CADc;AAElC+B,IAAAA,iBAAiB,EAAErD,CAAC,GAAGsC,oBAAJ,CAAyB,GAAzB,EAA8BtC,CAAC,GAAGuC,gBAAJ,CAAqBvC,CAAC,GAAGsB,UAAJ,CAAe,MAAf,CAArB,EAA6CD,SAA7C,CAA9B,EAAuFrB,CAAC,GAAGwC,gBAAJ,CAAqB,EAArB,CAAvF,CAFe;AAGlCc,IAAAA,gBAAgB,EAAEtD,CAAC,GAAGsB,UAAJ,CAAe,SAAf,CAHgB;AAIlCiC,IAAAA,aAAa,EAAEvD,CAAC,GAAGwD,eAAJ,CAAoB,CAACxD,CAAC,GAAGkC,aAAJ,CAAkB,SAAlB,CAAD,CAApB,CAJmB;AAKlCuB,IAAAA,YAAY,EAAElC,IALoB;AAMlCmC,IAAAA,QAAQ,EAAE1D,CAAC,GAAGsB,UAAJ,CAAe,MAAf;AANwB,GAAD,CAAhB,CAAZ,CAAP;AAQD;;AAED,SAASqC,QAAT,CAAkBvC,SAAlB,EAA6B;AAC3B,QAAMC,SAAS,GAAGrB,CAAC,GAAGsB,UAAJ,CAAe,cAAf,CAAlB;AACA,QAAMC,IAAI,GAAG,EAAb;AACAA,EAAAA,IAAI,CAACY,IAAL,CAAUnC,CAAC,GAAGoC,mBAAJ,CAAwB,KAAxB,EAA+B,CAACpC,CAAC,GAAGqC,kBAAJ,CAAuBhB,SAAvB,EAAkCrB,CAAC,GAAGwC,gBAAJ,CAAqB,EAArB,CAAlC,CAAD,CAA/B,CAAV;AACA,QAAMb,IAAI,GAAG3B,CAAC,GAAG4B,OAAJ,CAAYL,IAAZ,CAAb;AACAkB,EAAAA,YAAY,CAAClB,IAAD,EAAOF,SAAP,EAAkBD,SAAlB,CAAZ;AACAG,EAAAA,IAAI,CAACY,IAAL,CAAUnC,CAAC,GAAG6B,mBAAJ,CAAwBR,SAAxB,CAAV;AACA,SAAOM,IAAP;AACD;;AAED,SAASc,YAAT,CAAsBlB,IAAtB,EAA4BF,SAA5B,EAAuCD,SAAvC,EAAkD;AAChD,QAAMwC,kBAAkB,GAAGZ,IAAI,IAAI;AACjC,WAAO3B,SAAS,GAAGrB,CAAC,GAAGuC,gBAAJ,CAAqBlB,SAArB,EAAgCrB,CAAC,GAAGsB,UAAJ,CAAe0B,IAAf,CAAhC,CAAH,GAA2DhD,CAAC,GAAGsB,UAAJ,CAAgB,IAAG0B,IAAK,EAAxB,CAA3E;AACD,GAFD;;AAIA,QAAML,IAAI,GAAG,EAAb;AACAlD,EAAAA,OAAO,GAAGoE,IAAV,CAAeC,OAAf,CAAuB,UAAUd,IAAV,EAAgB;AACrC,QAAI5B,SAAS,IAAIA,SAAS,CAAC2C,OAAV,CAAkBf,IAAlB,IAA0B,CAA3C,EAA8C;AAC9C,UAAMgB,GAAG,GAAGrB,IAAI,CAACK,IAAD,CAAJ,GAAaY,kBAAkB,CAACZ,IAAD,CAA3C;;AAFqC,yBAKjCvD,OAAO,GAAGc,GAAV,CAAcyC,IAAd,EAAoBY,kBAApB,EAAwCI,GAAxC,CALiC;AAAA,UAInCC,KAJmC,gBAInCA,KAJmC;;AAMrC1C,IAAAA,IAAI,CAACY,IAAL,CAAU,GAAG8B,KAAb;AACD,GAPD;AAQA,SAAOtB,IAAP;AACD;;AAED,SAASnD,QAAT,CAAkB4B,SAAlB,EAA6B8C,UAAU,GAAG,QAA1C,EAAoD;AAClD,MAAIvC,IAAJ;AACA,QAAMwC,KAAK,GAAG;AACZC,IAAAA,MAAM,EAAEjD,WADI;AAEZkD,IAAAA,MAAM,EAAE3B,WAFI;AAGZ4B,IAAAA,GAAG,EAAEnB,QAHO;AAIZoB,IAAAA,GAAG,EAAEZ;AAJO,IAKZO,UALY,CAAd;;AAOA,MAAIC,KAAJ,EAAW;AACTxC,IAAAA,IAAI,GAAGwC,KAAK,CAAC/C,SAAD,CAAZ;AACD,GAFD,MAEO;AACL,UAAM,IAAIoD,KAAJ,CAAW,2BAA0BN,UAAW,EAAhD,CAAN;AACD;;AAED,SAAO,CAAC,GAAGrE,UAAU,GAAGN,OAAjB,EAA0BoC,IAA1B,EAAgC8C,IAAvC;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction helpers() {\n  const data = _interopRequireWildcard(require(\"@babel/helpers\"));\n\n  helpers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  const data = _interopRequireDefault(require(\"@babel/generator\"));\n\n  _generator = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  const data = _interopRequireDefault(require(\"@babel/template\"));\n\n  _template = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  const data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nconst buildUmdWrapper = replacements => _template().default`\n    (function (root, factory) {\n      if (typeof define === \"function\" && define.amd) {\n        define(AMD_ARGUMENTS, factory);\n      } else if (typeof exports === \"object\") {\n        factory(COMMON_ARGUMENTS);\n      } else {\n        factory(BROWSER_ARGUMENTS);\n      }\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n      FACTORY_BODY\n    });\n  `(replacements);\n\nfunction buildGlobal(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  const container = t().functionExpression(null, [t().identifier(\"global\")], t().blockStatement(body));\n  const tree = t().program([t().expressionStatement(t().callExpression(container, [t().conditionalExpression(t().binaryExpression(\"===\", t().unaryExpression(\"typeof\", t().identifier(\"global\")), t().stringLiteral(\"undefined\")), t().identifier(\"self\"), t().identifier(\"global\"))]))]);\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"global\"), namespace), t().objectExpression([])))]));\n  buildHelpers(body, namespace, whitelist);\n  return tree;\n}\n\nfunction buildModule(whitelist) {\n  const body = [];\n  const refs = buildHelpers(body, null, whitelist);\n  body.unshift(t().exportNamedDeclaration(null, Object.keys(refs).map(name => {\n    return t().exportSpecifier(t().cloneNode(refs[name]), t().identifier(name));\n  })));\n  return t().program(body, [], \"module\");\n}\n\nfunction buildUmd(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().identifier(\"global\"))]));\n  buildHelpers(body, namespace, whitelist);\n  return t().program([buildUmdWrapper({\n    FACTORY_PARAMETERS: t().identifier(\"global\"),\n    BROWSER_ARGUMENTS: t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"root\"), namespace), t().objectExpression([])),\n    COMMON_ARGUMENTS: t().identifier(\"exports\"),\n    AMD_ARGUMENTS: t().arrayExpression([t().stringLiteral(\"exports\")]),\n    FACTORY_BODY: body,\n    UMD_ROOT: t().identifier(\"this\")\n  })]);\n}\n\nfunction buildVar(whitelist) {\n  const namespace = t().identifier(\"babelHelpers\");\n  const body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().objectExpression([]))]));\n  const tree = t().program(body);\n  buildHelpers(body, namespace, whitelist);\n  body.push(t().expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(body, namespace, whitelist) {\n  const getHelperReference = name => {\n    return namespace ? t().memberExpression(namespace, t().identifier(name)) : t().identifier(`_${name}`);\n  };\n\n  const refs = {};\n  helpers().list.forEach(function (name) {\n    if (whitelist && whitelist.indexOf(name) < 0) return;\n    const ref = refs[name] = getHelperReference(name);\n    const {\n      nodes\n    } = helpers().get(name, getHelperReference, ref);\n    body.push(...nodes);\n  });\n  return refs;\n}\n\nfunction _default(whitelist, outputType = \"global\") {\n  let tree;\n  const build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar\n  }[outputType];\n\n  if (build) {\n    tree = build(whitelist);\n  } else {\n    throw new Error(`Unsupported output type ${outputType}`);\n  }\n\n  return (0, _generator().default)(tree).code;\n}"]},"metadata":{},"sourceType":"script"}