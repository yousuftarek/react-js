{"ast":null,"code":"var counter = 0;\n/**\n * @function hash\n *\n * @description\n * simple bitwise hash of string value\n *\n * @param {string} key ASCII only\n * @return {number} 32-bit positive integer hash\n */\n\nexport var hash = function hash(key) {\n  var stringToHash = key + \"-\" + counter;\n  var hashValue = 5381,\n      index = stringToHash.length;\n\n  while (index) {\n    hashValue = hashValue * 33 ^ stringToHash.charCodeAt(--index);\n  }\n\n  return \"scoped__\" + key + \"__\" + (hashValue >>> 0);\n};\n/**\n * @function hashKeys\n *\n * @description\n * create a hash map based on the keys passed\n *\n * @param {Array<string>} keys the keys to hash\n * @returns {Object} the hashmap of key => has pairs\n */\n\nexport var hashKeys = function hashKeys(keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = hash(key);\n    return hashMap;\n  }, {});\n};","map":{"version":3,"sources":["/home/hyper/Downloads/bookstore/node_modules/react-style-tag/es/hash.js"],"names":["counter","hash","key","stringToHash","hashValue","index","length","charCodeAt","hashKeys","keys","reduce","hashMap"],"mappings":"AAAA,IAAIA,OAAO,GAAG,CAAd;AAEA;;;;;;;;;;AASA,OAAO,IAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,GAAd,EAAmB;AACnC,MAAIC,YAAY,GAAGD,GAAG,GAAG,GAAN,GAAYF,OAA/B;AAEA,MAAII,SAAS,GAAG,IAAhB;AAAA,MACIC,KAAK,GAAGF,YAAY,CAACG,MADzB;;AAGA,SAAOD,KAAP,EAAc;AACZD,IAAAA,SAAS,GAAGA,SAAS,GAAG,EAAZ,GAAiBD,YAAY,CAACI,UAAb,CAAwB,EAAEF,KAA1B,CAA7B;AACD;;AAED,SAAO,aAAaH,GAAb,GAAmB,IAAnB,IAA2BE,SAAS,KAAK,CAAzC,CAAP;AACD,CAXM;AAaP;;;;;;;;;;AASA,OAAO,IAAII,QAAQ,GAAG,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAC5C,SAAOA,IAAI,CAACC,MAAL,CAAY,UAAUC,OAAV,EAAmBT,GAAnB,EAAwB;AACzCS,IAAAA,OAAO,CAACT,GAAD,CAAP,GAAeD,IAAI,CAACC,GAAD,CAAnB;AAEA,WAAOS,OAAP;AACD,GAJM,EAIJ,EAJI,CAAP;AAKD,CANM","sourcesContent":["var counter = 0;\n\n/**\n * @function hash\n *\n * @description\n * simple bitwise hash of string value\n *\n * @param {string} key ASCII only\n * @return {number} 32-bit positive integer hash\n */\nexport var hash = function hash(key) {\n  var stringToHash = key + \"-\" + counter;\n\n  var hashValue = 5381,\n      index = stringToHash.length;\n\n  while (index) {\n    hashValue = hashValue * 33 ^ stringToHash.charCodeAt(--index);\n  }\n\n  return \"scoped__\" + key + \"__\" + (hashValue >>> 0);\n};\n\n/**\n * @function hashKeys\n *\n * @description\n * create a hash map based on the keys passed\n *\n * @param {Array<string>} keys the keys to hash\n * @returns {Object} the hashmap of key => has pairs\n */\nexport var hashKeys = function hashKeys(keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = hash(key);\n\n    return hashMap;\n  }, {});\n};"]},"metadata":{},"sourceType":"module"}