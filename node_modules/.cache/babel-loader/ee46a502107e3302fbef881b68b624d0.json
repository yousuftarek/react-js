{"ast":null,"code":"\"use strict\";\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _core = require(\"./core\");\n\nvar _es = require(\"./es2015\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nconst bool = (0, _utils.assertValueType)(\"boolean\");\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\n(0, _utils.default)(\"TSParameterProperty\", {\n  aliases: [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"AssignmentPattern\")\n    }\n  }\n});\n(0, _utils.default)(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _es.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: (0, _utils.validateType)(\"TSEntityName\"),\n    right: (0, _utils.validateType)(\"Identifier\")\n  }\n});\nconst signatureDeclarationCommon = {\n  typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n  parameters: (0, _utils.validateArrayOfType)([\"Identifier\", \"RestElement\"]),\n  typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n};\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\n(0, _utils.default)(\"TSConstructSignatureDeclaration\", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = {\n  key: (0, _utils.validateType)(\"Expression\"),\n  computed: (0, _utils.validate)(bool),\n  optional: (0, _utils.validateOptional)(bool)\n};\n(0, _utils.default)(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: Object.assign({}, namedTypeElementCommon, {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  })\n});\n(0, _utils.default)(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon)\n});\n(0, _utils.default)(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n  }\n});\nconst tsKeywordTypes = [\"TSAnyKeyword\", \"TSUnknownKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSBooleanKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSVoidKeyword\", \"TSUndefinedKeyword\", \"TSNullKeyword\", \"TSNeverKeyword\"];\n\nfor (const type of tsKeywordTypes) {\n  (0, _utils.default)(type, {\n    aliases: [\"TSType\"],\n    visitor: [],\n    fields: {}\n  });\n}\n\n(0, _utils.default)(\"TSThisType\", {\n  aliases: [\"TSType\"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtr = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSFunctionType\", fnOrCtr);\n(0, _utils.default)(\"TSConstructorType\", fnOrCtr);\n(0, _utils.default)(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  fields: {\n    parameterName: (0, _utils.validateType)([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: (0, _utils.validateType)(\"TSTypeAnnotation\")\n  }\n});\n(0, _utils.default)(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: (0, _utils.validateType)([\"TSEntityName\", \"TSImportType\"])\n  }\n});\n(0, _utils.default)(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n};\n(0, _utils.default)(\"TSUnionType\", unionOrIntersection);\n(0, _utils.default)(\"TSIntersectionType\", unionOrIntersection);\n(0, _utils.default)(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: (0, _utils.validateType)(\"TSType\"),\n    extendsType: (0, _utils.validateType)(\"TSType\"),\n    trueType: (0, _utils.validateType)(\"TSType\"),\n    falseType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\")\n  }\n});\n(0, _utils.default)(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"TSType\"),\n    indexType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\"),\n    optional: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSLiteralType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: (0, _utils.validateType)([\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\"])\n  }\n});\n(0, _utils.default)(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\")),\n    body: (0, _utils.validateType)(\"TSInterfaceBody\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\"),\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    members: (0, _utils.validateArrayOfType)(\"TSEnumMember\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)([\"TSModuleBlock\", \"TSModuleDeclaration\"])\n  }\n});\n(0, _utils.default)(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\n(0, _utils.default)(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"StringLiteral\"),\n    qualifier: (0, _utils.validateOptionalType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    moduleReference: (0, _utils.validateType)([\"TSEntityName\", \"TSExternalModuleReference\"])\n  }\n});\n(0, _utils.default)(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\n(0, _utils.default)(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\n(0, _utils.default)(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TSType\")\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSType\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSTypeParameter\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameter\", {\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    }\n  }\n});","map":{"version":3,"sources":["/home/hyper/Downloads/gronthik/bookstore/node_modules/@babel/types/lib/definitions/typescript.js"],"names":["_utils","_interopRequireWildcard","require","_core","_es","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","desc","defineProperty","getOwnPropertyDescriptor","get","set","default","bool","assertValueType","tSFunctionTypeAnnotationCommon","returnType","validate","assertNodeType","optional","typeParameters","aliases","visitor","fields","accessibility","assertOneOf","readonly","parameter","assign","functionDeclarationCommon","classMethodOrDeclareMethodCommon","left","validateType","right","signatureDeclarationCommon","validateOptionalType","parameters","validateArrayOfType","typeAnnotation","callConstructSignatureDeclaration","namedTypeElementCommon","computed","validateOptional","initializer","tsKeywordTypes","type","fnOrCtr","typeName","parameterName","exprName","members","elementType","elementTypes","unionOrIntersection","types","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","literal","expression","declare","id","extends","arrayOfType","body","const","global","argument","qualifier","isExport","moduleReference","params","chain","assertEach","name","constraint"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _utils = _interopRequireWildcard(require(\"./utils\"));\n\nvar _core = require(\"./core\");\n\nvar _es = require(\"./es2015\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nconst bool = (0, _utils.assertValueType)(\"boolean\");\nconst tSFunctionTypeAnnotationCommon = {\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n};\n(0, _utils.default)(\"TSParameterProperty\", {\n  aliases: [\"LVal\"],\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    parameter: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"AssignmentPattern\")\n    }\n  }\n});\n(0, _utils.default)(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _core.functionDeclarationCommon, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: Object.assign({}, _es.classMethodOrDeclareMethodCommon, tSFunctionTypeAnnotationCommon)\n});\n(0, _utils.default)(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: (0, _utils.validateType)(\"TSEntityName\"),\n    right: (0, _utils.validateType)(\"Identifier\")\n  }\n});\nconst signatureDeclarationCommon = {\n  typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n  parameters: (0, _utils.validateArrayOfType)([\"Identifier\", \"RestElement\"]),\n  typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n};\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\n(0, _utils.default)(\"TSConstructSignatureDeclaration\", callConstructSignatureDeclaration);\nconst namedTypeElementCommon = {\n  key: (0, _utils.validateType)(\"Expression\"),\n  computed: (0, _utils.validate)(bool),\n  optional: (0, _utils.validateOptional)(bool)\n};\n(0, _utils.default)(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: Object.assign({}, namedTypeElementCommon, {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  })\n});\n(0, _utils.default)(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: Object.assign({}, signatureDeclarationCommon, namedTypeElementCommon)\n});\n(0, _utils.default)(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    parameters: (0, _utils.validateArrayOfType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSTypeAnnotation\")\n  }\n});\nconst tsKeywordTypes = [\"TSAnyKeyword\", \"TSUnknownKeyword\", \"TSNumberKeyword\", \"TSObjectKeyword\", \"TSBooleanKeyword\", \"TSStringKeyword\", \"TSSymbolKeyword\", \"TSVoidKeyword\", \"TSUndefinedKeyword\", \"TSNullKeyword\", \"TSNeverKeyword\"];\n\nfor (const type of tsKeywordTypes) {\n  (0, _utils.default)(type, {\n    aliases: [\"TSType\"],\n    visitor: [],\n    fields: {}\n  });\n}\n\n(0, _utils.default)(\"TSThisType\", {\n  aliases: [\"TSType\"],\n  visitor: [],\n  fields: {}\n});\nconst fnOrCtr = {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameters\", \"parameters\", \"typeAnnotation\"],\n  fields: signatureDeclarationCommon\n};\n(0, _utils.default)(\"TSFunctionType\", fnOrCtr);\n(0, _utils.default)(\"TSConstructorType\", fnOrCtr);\n(0, _utils.default)(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  fields: {\n    parameterName: (0, _utils.validateType)([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: (0, _utils.validateType)(\"TSTypeAnnotation\")\n  }\n});\n(0, _utils.default)(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\"],\n  fields: {\n    exprName: (0, _utils.validateType)([\"TSEntityName\", \"TSImportType\"])\n  }\n});\n(0, _utils.default)(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: (0, _utils.validateArrayOfType)(\"TSType\")\n  }\n};\n(0, _utils.default)(\"TSUnionType\", unionOrIntersection);\n(0, _utils.default)(\"TSIntersectionType\", unionOrIntersection);\n(0, _utils.default)(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: (0, _utils.validateType)(\"TSType\"),\n    extendsType: (0, _utils.validateType)(\"TSType\"),\n    trueType: (0, _utils.validateType)(\"TSType\"),\n    falseType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\")\n  }\n});\n(0, _utils.default)(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"TSType\"),\n    indexType: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\"],\n  fields: {\n    readonly: (0, _utils.validateOptional)(bool),\n    typeParameter: (0, _utils.validateType)(\"TSTypeParameter\"),\n    optional: (0, _utils.validateOptional)(bool),\n    typeAnnotation: (0, _utils.validateOptionalType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSLiteralType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: (0, _utils.validateType)([\"NumericLiteral\", \"StringLiteral\", \"BooleanLiteral\"])\n  }\n});\n(0, _utils.default)(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\")),\n    body: (0, _utils.validateType)(\"TSInterfaceBody\")\n  }\n});\n(0, _utils.default)(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"TSTypeElement\")\n  }\n});\n(0, _utils.default)(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSAsExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TSType\")\n  }\n});\n(0, _utils.default)(\"TSTypeAssertion\", {\n  aliases: [\"Expression\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TSType\"),\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    const: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    members: (0, _utils.validateArrayOfType)(\"TSEnumMember\"),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    initializer: (0, _utils.validateOptionalType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: (0, _utils.validateOptional)(bool),\n    global: (0, _utils.validateOptional)(bool),\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)([\"TSModuleBlock\", \"TSModuleDeclaration\"])\n  }\n});\n(0, _utils.default)(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\n(0, _utils.default)(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"StringLiteral\"),\n    qualifier: (0, _utils.validateOptionalType)(\"TSEntityName\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TSTypeParameterInstantiation\")\n  }\n});\n(0, _utils.default)(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: (0, _utils.validate)(bool),\n    id: (0, _utils.validateType)(\"Identifier\"),\n    moduleReference: (0, _utils.validateType)([\"TSEntityName\", \"TSExternalModuleReference\"])\n  }\n});\n(0, _utils.default)(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\n(0, _utils.default)(\"TSNonNullExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\")\n  }\n});\n(0, _utils.default)(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\n(0, _utils.default)(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TSType\")\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSType\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"TSTypeParameter\")))\n    }\n  }\n});\n(0, _utils.default)(\"TSTypeParameter\", {\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    constraint: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    },\n    default: {\n      validate: (0, _utils.assertNodeType)(\"TSType\"),\n      optional: true\n    }\n  }\n});"]},"metadata":{},"sourceType":"script"}