{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/hyper/Downloads/gronthik/bookstore/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = validate;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nvar _removed = _interopRequireDefault(require(\"./removed\"));\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ROOT_VALIDATORS = {\n  cwd: _optionAssertions.assertString,\n  root: _optionAssertions.assertString,\n  rootMode: _optionAssertions.assertRootMode,\n  configFile: _optionAssertions.assertConfigFileSearch,\n  caller: _optionAssertions.assertCallerMetadata,\n  filename: _optionAssertions.assertString,\n  filenameRelative: _optionAssertions.assertString,\n  code: _optionAssertions.assertBoolean,\n  ast: _optionAssertions.assertBoolean,\n  envName: _optionAssertions.assertString\n};\nvar BABELRC_VALIDATORS = {\n  babelrc: _optionAssertions.assertBoolean,\n  babelrcRoots: _optionAssertions.assertBabelrcSearch\n};\nvar NONPRESET_VALIDATORS = {\n  extends: _optionAssertions.assertString,\n  ignore: _optionAssertions.assertIgnoreList,\n  only: _optionAssertions.assertIgnoreList\n};\nvar COMMON_VALIDATORS = {\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\n  presets: _optionAssertions.assertPluginList,\n  plugins: _optionAssertions.assertPluginList,\n  passPerPreset: _optionAssertions.assertBoolean,\n  env: assertEnvSet,\n  overrides: assertOverridesList,\n  test: _optionAssertions.assertConfigApplicableTest,\n  include: _optionAssertions.assertConfigApplicableTest,\n  exclude: _optionAssertions.assertConfigApplicableTest,\n  retainLines: _optionAssertions.assertBoolean,\n  comments: _optionAssertions.assertBoolean,\n  shouldPrintComment: _optionAssertions.assertFunction,\n  compact: _optionAssertions.assertCompact,\n  minified: _optionAssertions.assertBoolean,\n  auxiliaryCommentBefore: _optionAssertions.assertString,\n  auxiliaryCommentAfter: _optionAssertions.assertString,\n  sourceType: _optionAssertions.assertSourceType,\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n  highlightCode: _optionAssertions.assertBoolean,\n  sourceMaps: _optionAssertions.assertSourceMaps,\n  sourceMap: _optionAssertions.assertSourceMaps,\n  sourceFileName: _optionAssertions.assertString,\n  sourceRoot: _optionAssertions.assertString,\n  getModuleId: _optionAssertions.assertFunction,\n  moduleRoot: _optionAssertions.assertString,\n  moduleIds: _optionAssertions.assertBoolean,\n  moduleId: _optionAssertions.assertString,\n  parserOpts: _optionAssertions.assertObject,\n  generatorOpts: _optionAssertions.assertObject\n};\n\nfunction getSource(loc) {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nfunction validate(type, opts) {\n  return validateNested({\n    type: \"root\",\n    source: type\n  }, opts);\n}\n\nfunction validateNested(loc, opts) {\n  var type = getSource(loc);\n  assertNoDuplicateSourcemap(opts);\n  Object.keys(opts).forEach(function (key) {\n    var optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc\n    };\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(\"\".concat((0, _optionAssertions.msg)(optLoc), \" is not allowed in preset options\"));\n    }\n\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(\"\".concat((0, _optionAssertions.msg)(optLoc), \" is only allowed in root programmatic options\"));\n    }\n\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(\"\".concat((0, _optionAssertions.msg)(optLoc), \" is not allowed in .babelrc or \\\"extends\\\"ed files, only in root programmatic options, \") + \"or babel.config.js/config file options\");\n      }\n\n      throw new Error(\"\".concat((0, _optionAssertions.msg)(optLoc), \" is only allowed in root programmatic options, or babel.config.js/config file options\"));\n    }\n\n    var validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\n    validator(optLoc, opts[key]);\n  });\n  return opts;\n}\n\nfunction throwUnknownError(loc) {\n  var key = loc.name;\n\n  if (_removed.default[key]) {\n    var _removed$default$key = _removed.default[key],\n        message = _removed$default$key.message,\n        _removed$default$key$ = _removed$default$key.version,\n        version = _removed$default$key$ === void 0 ? 5 : _removed$default$key$;\n    throw new ReferenceError(\"Using removed Babel \".concat(version, \" option: \").concat((0, _optionAssertions.msg)(loc), \" - \").concat(message));\n  } else {\n    var unknownOptErr = \"Unknown option: \".concat((0, _optionAssertions.msg)(loc), \". Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.\");\n    throw new ReferenceError(unknownOptErr);\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts) {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(\"\".concat((0, _optionAssertions.msg)(loc), \" is not allowed inside of another .env block\"));\n  }\n\n  var parent = loc.parent;\n  var obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n      var envName = _Object$keys[_i];\n      var env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\n      if (!env) continue;\n      var envLoc = {\n        type: \"env\",\n        name: envName,\n        parent: parent\n      };\n      validateNested(envLoc, env);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertOverridesList(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(\"\".concat((0, _optionAssertions.msg)(loc), \" is not allowed inside an .env block\"));\n  }\n\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(\"\".concat((0, _optionAssertions.msg)(loc), \" is not allowed inside an .overrides block\"));\n  }\n\n  var parent = loc.parent;\n  var arr = (0, _optionAssertions.assertArray)(loc, value);\n\n  if (arr) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = arr.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ref3 = _step.value;\n\n        var _ref2 = _slicedToArray(_ref3, 2);\n\n        var index = _ref2[0];\n        var item = _ref2[1];\n        var objLoc = (0, _optionAssertions.access)(loc, index);\n        var env = (0, _optionAssertions.assertObject)(objLoc, item);\n        if (!env) throw new Error(\"\".concat((0, _optionAssertions.msg)(objLoc), \" must be an object\"));\n        var overridesLoc = {\n          type: \"overrides\",\n          index: index,\n          parent: parent\n        };\n        validateNested(overridesLoc, env);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return arr;\n}","map":{"version":3,"sources":["/home/hyper/Downloads/gronthik/bookstore/node_modules/@babel/core/lib/config/validation/options.js"],"names":["Object","defineProperty","exports","value","validate","_plugin","_interopRequireDefault","require","_removed","_optionAssertions","obj","__esModule","default","ROOT_VALIDATORS","cwd","assertString","root","rootMode","assertRootMode","configFile","assertConfigFileSearch","caller","assertCallerMetadata","filename","filenameRelative","code","assertBoolean","ast","envName","BABELRC_VALIDATORS","babelrc","babelrcRoots","assertBabelrcSearch","NONPRESET_VALIDATORS","extends","ignore","assertIgnoreList","only","COMMON_VALIDATORS","inputSourceMap","assertInputSourceMap","presets","assertPluginList","plugins","passPerPreset","env","assertEnvSet","overrides","assertOverridesList","test","assertConfigApplicableTest","include","exclude","retainLines","comments","shouldPrintComment","assertFunction","compact","assertCompact","minified","auxiliaryCommentBefore","auxiliaryCommentAfter","sourceType","assertSourceType","wrapPluginVisitorMethod","highlightCode","sourceMaps","assertSourceMaps","sourceMap","sourceFileName","sourceRoot","getModuleId","moduleRoot","moduleIds","moduleId","parserOpts","assertObject","generatorOpts","getSource","loc","type","source","parent","opts","validateNested","assertNoDuplicateSourcemap","keys","forEach","key","optLoc","name","Error","msg","validator","throwUnknownError","message","version","ReferenceError","unknownOptErr","has","prototype","hasOwnProperty","call","access","envLoc","arr","assertArray","entries","index","item","objLoc","overridesLoc"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validate = validate;\n\nvar _plugin = _interopRequireDefault(require(\"../plugin\"));\n\nvar _removed = _interopRequireDefault(require(\"./removed\"));\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst ROOT_VALIDATORS = {\n  cwd: _optionAssertions.assertString,\n  root: _optionAssertions.assertString,\n  rootMode: _optionAssertions.assertRootMode,\n  configFile: _optionAssertions.assertConfigFileSearch,\n  caller: _optionAssertions.assertCallerMetadata,\n  filename: _optionAssertions.assertString,\n  filenameRelative: _optionAssertions.assertString,\n  code: _optionAssertions.assertBoolean,\n  ast: _optionAssertions.assertBoolean,\n  envName: _optionAssertions.assertString\n};\nconst BABELRC_VALIDATORS = {\n  babelrc: _optionAssertions.assertBoolean,\n  babelrcRoots: _optionAssertions.assertBabelrcSearch\n};\nconst NONPRESET_VALIDATORS = {\n  extends: _optionAssertions.assertString,\n  ignore: _optionAssertions.assertIgnoreList,\n  only: _optionAssertions.assertIgnoreList\n};\nconst COMMON_VALIDATORS = {\n  inputSourceMap: _optionAssertions.assertInputSourceMap,\n  presets: _optionAssertions.assertPluginList,\n  plugins: _optionAssertions.assertPluginList,\n  passPerPreset: _optionAssertions.assertBoolean,\n  env: assertEnvSet,\n  overrides: assertOverridesList,\n  test: _optionAssertions.assertConfigApplicableTest,\n  include: _optionAssertions.assertConfigApplicableTest,\n  exclude: _optionAssertions.assertConfigApplicableTest,\n  retainLines: _optionAssertions.assertBoolean,\n  comments: _optionAssertions.assertBoolean,\n  shouldPrintComment: _optionAssertions.assertFunction,\n  compact: _optionAssertions.assertCompact,\n  minified: _optionAssertions.assertBoolean,\n  auxiliaryCommentBefore: _optionAssertions.assertString,\n  auxiliaryCommentAfter: _optionAssertions.assertString,\n  sourceType: _optionAssertions.assertSourceType,\n  wrapPluginVisitorMethod: _optionAssertions.assertFunction,\n  highlightCode: _optionAssertions.assertBoolean,\n  sourceMaps: _optionAssertions.assertSourceMaps,\n  sourceMap: _optionAssertions.assertSourceMaps,\n  sourceFileName: _optionAssertions.assertString,\n  sourceRoot: _optionAssertions.assertString,\n  getModuleId: _optionAssertions.assertFunction,\n  moduleRoot: _optionAssertions.assertString,\n  moduleIds: _optionAssertions.assertBoolean,\n  moduleId: _optionAssertions.assertString,\n  parserOpts: _optionAssertions.assertObject,\n  generatorOpts: _optionAssertions.assertObject\n};\n\nfunction getSource(loc) {\n  return loc.type === \"root\" ? loc.source : getSource(loc.parent);\n}\n\nfunction validate(type, opts) {\n  return validateNested({\n    type: \"root\",\n    source: type\n  }, opts);\n}\n\nfunction validateNested(loc, opts) {\n  const type = getSource(loc);\n  assertNoDuplicateSourcemap(opts);\n  Object.keys(opts).forEach(key => {\n    const optLoc = {\n      type: \"option\",\n      name: key,\n      parent: loc\n    };\n\n    if (type === \"preset\" && NONPRESET_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);\n    }\n\n    if (type !== \"arguments\" && ROOT_VALIDATORS[key]) {\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);\n    }\n\n    if (type !== \"arguments\" && type !== \"configfile\" && BABELRC_VALIDATORS[key]) {\n      if (type === \"babelrcfile\" || type === \"extendsfile\") {\n        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or \"extends\"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);\n      }\n\n      throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);\n    }\n\n    const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;\n    validator(optLoc, opts[key]);\n  });\n  return opts;\n}\n\nfunction throwUnknownError(loc) {\n  const key = loc.name;\n\n  if (_removed.default[key]) {\n    const {\n      message,\n      version = 5\n    } = _removed.default[key];\n    throw new ReferenceError(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);\n  } else {\n    const unknownOptErr = `Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`;\n    throw new ReferenceError(unknownOptErr);\n  }\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction assertNoDuplicateSourcemap(opts) {\n  if (has(opts, \"sourceMap\") && has(opts, \"sourceMaps\")) {\n    throw new Error(\".sourceMap is an alias for .sourceMaps, cannot use both\");\n  }\n}\n\nfunction assertEnvSet(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);\n  }\n\n  const parent = loc.parent;\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    for (const envName of Object.keys(obj)) {\n      const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);\n      if (!env) continue;\n      const envLoc = {\n        type: \"env\",\n        name: envName,\n        parent\n      };\n      validateNested(envLoc, env);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertOverridesList(loc, value) {\n  if (loc.parent.type === \"env\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);\n  }\n\n  if (loc.parent.type === \"overrides\") {\n    throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);\n  }\n\n  const parent = loc.parent;\n  const arr = (0, _optionAssertions.assertArray)(loc, value);\n\n  if (arr) {\n    for (const [index, item] of arr.entries()) {\n      const objLoc = (0, _optionAssertions.access)(loc, index);\n      const env = (0, _optionAssertions.assertObject)(objLoc, item);\n      if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);\n      const overridesLoc = {\n        type: \"overrides\",\n        index,\n        parent\n      };\n      validateNested(overridesLoc, env);\n    }\n  }\n\n  return arr;\n}"]},"metadata":{},"sourceType":"script"}