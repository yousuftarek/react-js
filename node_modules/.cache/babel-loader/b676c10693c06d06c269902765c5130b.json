{"ast":null,"code":"// constants\nimport { IS_PRODUCTION } from './constants';\n/**\n * @constant {Object} GLOBAL_OPTIONS the global options to apply as fallback to local props\n */\n\nexport var GLOBAL_OPTIONS = {\n  hasSourceMap: !IS_PRODUCTION,\n  isCompressed: true,\n  isMinified: IS_PRODUCTION,\n  isPrefixed: true\n};\n/**\n * @function getCoalescedOption\n *\n * @description\n * get the option either from props if it exists, or globally\n *\n * @param {Object} props the props to the specific instance\n * @param {string} option the option to coalesce\n * @returns {boolean} the coalesced option\n */\n\nexport var getCoalescedOption = function getCoalescedOption(props, option) {\n  return typeof props[option] === 'boolean' ? props[option] : GLOBAL_OPTIONS[option];\n};\n/**\n * @function setGlobalOptions\n *\n * @description\n * set the options passed to be global\n *\n * @param {Object} options the objects to apply globally\n * @returns {void}\n */\n\nexport var setGlobalOptions = function setGlobalOptions(options) {\n  return Object.keys(options).forEach(function (option) {\n    return GLOBAL_OPTIONS.hasOwnProperty(option) && typeof options[option] === 'boolean' && (GLOBAL_OPTIONS[option] = options[option]);\n  });\n};","map":{"version":3,"sources":["/home/hyper/yousuftarek/bookstore/node_modules/react-style-tag/es/options.js"],"names":["IS_PRODUCTION","GLOBAL_OPTIONS","hasSourceMap","isCompressed","isMinified","isPrefixed","getCoalescedOption","props","option","setGlobalOptions","options","Object","keys","forEach","hasOwnProperty"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,aAA9B;AAEA;;;;AAGA,OAAO,IAAIC,cAAc,GAAG;AAC1BC,EAAAA,YAAY,EAAE,CAACF,aADW;AAE1BG,EAAAA,YAAY,EAAE,IAFY;AAG1BC,EAAAA,UAAU,EAAEJ,aAHc;AAI1BK,EAAAA,UAAU,EAAE;AAJc,CAArB;AAOP;;;;;;;;;;;AAUA,OAAO,IAAIC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,KAA5B,EAAmCC,MAAnC,EAA2C;AACzE,SAAO,OAAOD,KAAK,CAACC,MAAD,CAAZ,KAAyB,SAAzB,GAAqCD,KAAK,CAACC,MAAD,CAA1C,GAAqDP,cAAc,CAACO,MAAD,CAA1E;AACD,CAFM;AAIP;;;;;;;;;;AASA,OAAO,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/D,SAAOC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,OAArB,CAA6B,UAAUL,MAAV,EAAkB;AACpD,WAAOP,cAAc,CAACa,cAAf,CAA8BN,MAA9B,KAAyC,OAAOE,OAAO,CAACF,MAAD,CAAd,KAA2B,SAApE,KAAkFP,cAAc,CAACO,MAAD,CAAd,GAAyBE,OAAO,CAACF,MAAD,CAAlH,CAAP;AACD,GAFM,CAAP;AAGD,CAJM","sourcesContent":["// constants\nimport { IS_PRODUCTION } from './constants';\n\n/**\n * @constant {Object} GLOBAL_OPTIONS the global options to apply as fallback to local props\n */\nexport var GLOBAL_OPTIONS = {\n  hasSourceMap: !IS_PRODUCTION,\n  isCompressed: true,\n  isMinified: IS_PRODUCTION,\n  isPrefixed: true\n};\n\n/**\n * @function getCoalescedOption\n *\n * @description\n * get the option either from props if it exists, or globally\n *\n * @param {Object} props the props to the specific instance\n * @param {string} option the option to coalesce\n * @returns {boolean} the coalesced option\n */\nexport var getCoalescedOption = function getCoalescedOption(props, option) {\n  return typeof props[option] === 'boolean' ? props[option] : GLOBAL_OPTIONS[option];\n};\n\n/**\n * @function setGlobalOptions\n *\n * @description\n * set the options passed to be global\n *\n * @param {Object} options the objects to apply globally\n * @returns {void}\n */\nexport var setGlobalOptions = function setGlobalOptions(options) {\n  return Object.keys(options).forEach(function (option) {\n    return GLOBAL_OPTIONS.hasOwnProperty(option) && typeof options[option] === 'boolean' && (GLOBAL_OPTIONS[option] = options[option]);\n  });\n};"]},"metadata":{},"sourceType":"module"}