{"ast":null,"code":"// external dependencies\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\n/**\n * @function bindSetState\n *\n * @description\n * bind the setState method to the component instance to ensure it can be used in a functional way\n *\n * @param {ReactComponent} instance the instance to bind setState to\n * @returns {void}\n */\n\nexport var bindSetState = function bindSetState(instance) {\n  return instance.setState = instance.setState.bind(instance);\n};\n/**\n * @function isClassComponent\n *\n * @description\n * is the value passed a valid react component class instance\n *\n * @param {any} value the value to test\n * @returns {boolean} is the value a react component instance\n */\n\nexport var isClassComponent = function isClassComponent(value) {\n  return !!value && value instanceof React.Component;\n};\n/**\n * @function logInvalidInstanceError\n *\n * @description\n * notify the user that the instance passed is invalid\n *\n * @param {string} type the type of creator being called\n * @returns {void}\n */\n\nexport var logInvalidInstanceError = function logInvalidInstanceError(type) {\n  return console.error('The instance provided for use with the ' + type + ' is not a valid React component instance.');\n}; // eslint-disable-line no-console\n\n/**\n * @function createRefCreator\n *\n * @description\n * create a method that will assign a ref value to the instance passed\n *\n * @param {function} getter the function that gets the component value for the ref\n * @returns {function(ReactComponent, string): function((HTMLElement|Component)): void} the ref create\n */\n\nexport var createRefCreator = function createRefCreator(getter) {\n  return function (instance, ref) {\n    return isClassComponent(instance) ? function (component) {\n      return instance[ref] = getter(component);\n    } : logInvalidInstanceError('ref');\n  };\n};\n/**\n * @function getNamespacedRef\n *\n * @description\n * get the ref that is a combination of the raw component and the component's underlying HTML element\n *\n * @param {ReactComponent} component the component to assin\n * @returns {{component: ReactComponent, element: HTMLElement}} the namespaced ref\n */\n\nexport var getNamespacedRef = function getNamespacedRef(component) {\n  return {\n    component: component,\n    element: findDOMNode(component)\n  };\n};\n/**\n * @function identity\n *\n * @description\n * return the first parameter passed\n *\n * @param {any} value the value to pass through\n * @returns {any} the first parameter passed\n */\n\nexport var identity = function identity(value) {\n  return value;\n};","map":{"version":3,"sources":["/home/gronthik/Downloads/gronthik.com/gronthikfrontend/bookstore/node_modules/react-parm/es/utils.js"],"names":["React","findDOMNode","bindSetState","instance","setState","bind","isClassComponent","value","Component","logInvalidInstanceError","type","console","error","createRefCreator","getter","ref","component","getNamespacedRef","element","identity"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA;;;;;;;;;;AASA,OAAO,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,QAAtB,EAAgC;AACxD,SAAOA,QAAQ,CAACC,QAAT,GAAoBD,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,CAAuBF,QAAvB,CAA3B;AACD,CAFM;AAIP;;;;;;;;;;AASA,OAAO,IAAIG,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7D,SAAO,CAAC,CAACA,KAAF,IAAWA,KAAK,YAAYP,KAAK,CAACQ,SAAzC;AACD,CAFM;AAIP;;;;;;;;;;AASA,OAAO,IAAIC,uBAAuB,GAAG,SAASA,uBAAT,CAAiCC,IAAjC,EAAuC;AAC1E,SAAOC,OAAO,CAACC,KAAR,CAAc,4CAA4CF,IAA5C,GAAmD,2CAAjE,CAAP;AACD,CAFM,C,CAEJ;;AAEH;;;;;;;;;;AASA,OAAO,IAAIG,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AAC9D,SAAO,UAAUX,QAAV,EAAoBY,GAApB,EAAyB;AAC9B,WAAOT,gBAAgB,CAACH,QAAD,CAAhB,GAA6B,UAAUa,SAAV,EAAqB;AACvD,aAAOb,QAAQ,CAACY,GAAD,CAAR,GAAgBD,MAAM,CAACE,SAAD,CAA7B;AACD,KAFM,GAEHP,uBAAuB,CAAC,KAAD,CAF3B;AAGD,GAJD;AAKD,CANM;AAQP;;;;;;;;;;AASA,OAAO,IAAIQ,gBAAgB,GAAG,SAASA,gBAAT,CAA0BD,SAA1B,EAAqC;AACjE,SAAO;AAAEA,IAAAA,SAAS,EAAEA,SAAb;AAAwBE,IAAAA,OAAO,EAAEjB,WAAW,CAACe,SAAD;AAA5C,GAAP;AACD,CAFM;AAIP;;;;;;;;;;AASA,OAAO,IAAIG,QAAQ,GAAG,SAASA,QAAT,CAAkBZ,KAAlB,EAAyB;AAC7C,SAAOA,KAAP;AACD,CAFM","sourcesContent":["// external dependencies\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\n\n/**\n * @function bindSetState\n *\n * @description\n * bind the setState method to the component instance to ensure it can be used in a functional way\n *\n * @param {ReactComponent} instance the instance to bind setState to\n * @returns {void}\n */\nexport var bindSetState = function bindSetState(instance) {\n  return instance.setState = instance.setState.bind(instance);\n};\n\n/**\n * @function isClassComponent\n *\n * @description\n * is the value passed a valid react component class instance\n *\n * @param {any} value the value to test\n * @returns {boolean} is the value a react component instance\n */\nexport var isClassComponent = function isClassComponent(value) {\n  return !!value && value instanceof React.Component;\n};\n\n/**\n * @function logInvalidInstanceError\n *\n * @description\n * notify the user that the instance passed is invalid\n *\n * @param {string} type the type of creator being called\n * @returns {void}\n */\nexport var logInvalidInstanceError = function logInvalidInstanceError(type) {\n  return console.error('The instance provided for use with the ' + type + ' is not a valid React component instance.');\n}; // eslint-disable-line no-console\n\n/**\n * @function createRefCreator\n *\n * @description\n * create a method that will assign a ref value to the instance passed\n *\n * @param {function} getter the function that gets the component value for the ref\n * @returns {function(ReactComponent, string): function((HTMLElement|Component)): void} the ref create\n */\nexport var createRefCreator = function createRefCreator(getter) {\n  return function (instance, ref) {\n    return isClassComponent(instance) ? function (component) {\n      return instance[ref] = getter(component);\n    } : logInvalidInstanceError('ref');\n  };\n};\n\n/**\n * @function getNamespacedRef\n *\n * @description\n * get the ref that is a combination of the raw component and the component's underlying HTML element\n *\n * @param {ReactComponent} component the component to assin\n * @returns {{component: ReactComponent, element: HTMLElement}} the namespaced ref\n */\nexport var getNamespacedRef = function getNamespacedRef(component) {\n  return { component: component, element: findDOMNode(component) };\n};\n\n/**\n * @function identity\n *\n * @description\n * return the first parameter passed\n *\n * @param {any} value the value to pass through\n * @returns {any} the first parameter passed\n */\nexport var identity = function identity(value) {\n  return value;\n};"]},"metadata":{},"sourceType":"module"}